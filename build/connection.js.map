{"version":3,"sources":["connection.es6"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AAAA,IAA8B,QAAQ,QAAQ,OAAR,CAAtC;;AAEA,IAAI,QAAQ;AACR,UAAM;AADE,CAAZ;;AAIA,IAAI,UAAU;AACb,UAAM,QAAQ,GAAR,CAAY,uBAAZ,IAAuC,WADhC;AAEb,UAAM,QAAQ,GAAR,CAAY,uBAAZ,IAAuC,MAFhC;AAGb,UAAM,QAAQ,GAAR,CAAY,2BAAZ,IAA2C,MAHpC;AAIb,cAAU,QAAQ,GAAR,CAAY,2BAAZ,IAA2C,UAJxC;AAKb,cAAU,UALG;AAMb,wBAAoB,IANP;AAOb,6BAAyB,MAPZ,EAOoB;AACjC,gBAAY,QARC,EAQS;AACtB,yBAAqB,IATR,EASc;AAC3B,qBAAiB,CAVJ,EAUO;AACpB,YAAQ;AACP,mBAAW,UADJ;AAEP,qBAAa;AACZ,wBAAY,YADA;AAEZ,qBAAS,SAFG;AAGZ,kBAAM;AAHM;AAFN;AAXK,CAAd;;AAqBA,QAAQ,OAAR,GAAkB,UAAS,IAAT,EAAe;AAC7B,UAAM,IAAN,GAAa,MAAM,UAAN,CAAiB,OAAjB,CAAb;AACA;AACH,CAHD;;AAKA,QAAQ,GAAR,GAAc,YAAW;AACrB,WAAO,MAAM,IAAb;AACH,CAFD;;AAIA,QAAQ,OAAR,GAAkB,OAAlB;;AAEA,QAAQ,QAAR,GAAmB,UAAS,IAAT,EAAe;AAC9B,QAAI,OAAO,MAAM,IAAjB;AACA,QAAI,CAAC,IAAL,EAAW;AACP,eAAO,KAAK,IAAI,KAAJ,CAAU,6BAAV,CAAL,CAAP;AACH;;AAED,QAAI,QAAQ,OAAO,IAAP,CAAY,KAAK,MAAjB,CAAZ;AACA,UAAM,IAAN,CAAW,KAAX,EAAkB,UAAS,IAAT,EAAe,EAAf,EAAmB;AACjC,cAAM,IAAN,CAAW,KAAK,MAAL,CAAY,IAAZ,CAAX,EAA8B,UAAS,GAAT,EAAc,EAAd,EAAkB;AAC5C,gBAAI,OAAO,OAAO,IAAP,CAAY,GAAZ,CAAX;AAAA,gBACI,SAAS,KAAK,GAAL,CAAS,UAAS,GAAT,EAAc;AAAE,uBAAO,MAAM,IAAI,GAAJ,CAAN,GAAiB,GAAxB;AAA6B,aAAtD,CADb;;AAGA,iBAAK,KAAL,CAAW,iBAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAK,IAAL,CAAU,GAAV,CAA/B,GAAgD,YAAhD,GAA+D,OAAO,IAAP,CAAY,GAAZ,CAA/D,GAAkF,GAA7F,EAAkG,EAAlG;AACH,SALD,EAKG,EALH;AAMH,KAPD,EAOG,IAPH;AAQH,CAfD;;AAiBA,QAAQ,IAAR,GAAe,UAAS,MAAT,EAAiB,IAAjB,EAAuB;AAClC,QAAI,OAAO,MAAM,IAAjB;AACA,QAAI,CAAC,IAAL,EAAW;AACP,eAAO,KAAK,IAAI,KAAJ,CAAU,6BAAV,CAAL,CAAP;AACH;;AAED,UAAM,IAAN,CAAW,MAAX,EAAmB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,aAAK,KAAL,CAAW,mBAAmB,IAA9B,EAAoC,EAApC;AACH,KAFD,EAEG,IAFH;AAGH,CATD","file":"connection.js","sourcesContent":["/*\n Query result helpers:\n result.insertId -> auto incremented primary key from insert\n result.affectedRows -> number of affected rows from update/delete statement\n result.changedRows -> number of changed rows from update statement\n */\n\nvar mysql = require('mysql'), async = require('async');\n\nvar state = {\n    pool: null\n};\n\nvar options = {\n\thost: process.env.OPENSHIFT_MYSQL_DB_HOST || 'localhost',\n\tport: process.env.OPENSHIFT_MYSQL_DB_PORT || '3306',\n\tuser: process.env.OPENSHIFT_MYSQL_DB_USERNAME || 'root',\n\tpassword: process.env.OPENSHIFT_MYSQL_DB_PASSWORD || 'password',\n\tdatabase: 'build_db',\n\tmultipleStatements: true,\n\tcheckExpirationInterval: 900000, // How frequently expired sessions will be cleared; milliseconds.\n\texpiration: 86400000, // The maximum age of a valid session; milliseconds.\n\tcreateDatabaseTable: true, // Whether or not to create the sessions database table, if one does not already exist.\n\tconnectionLimit: 1, // Number of connections when creating a connection pool\n\tschema: {\n\t\ttableName: 'sessions',\n\t\tcolumnNames: {\n\t\t\tsession_id: 'session_id',\n\t\t\texpires: 'expires',\n\t\t\tdata: 'data'\n\t\t}\n\t}\n};\n\nexports.connect = function(done) {\n    state.pool = mysql.createPool(options);\n    done();\n};\n\nexports.get = function() {\n    return state.pool;\n};\n\nexports.options = options;\n\nexports.fixtures = function(data) {\n    var pool = state.pool;\n    if (!pool) {\n        return done(new Error('Missing database connection'));\n    }\n\n    var names = Object.keys(data.tables);\n    async.each(names, function(name, cb) {\n        async.each(data.tables[name], function(row, cb) {\n            var keys = Object.keys(row),\n                values = keys.map(function(key) { return \"'\" + row[key] + \"'\" });\n\n            pool.query('INSERT INTO ' + name + ' (' + keys.join(',') + ') VALUES (' + values.join(',') + ')', cb);\n        }, cb);\n    }, done);\n};\n\nexports.drop = function(tables, done) {\n    var pool = state.pool;\n    if (!pool) {\n        return done(new Error('Missing database connection'));\n    }\n\n    async.each(tables, function(name, cb) {\n        pool.query('DELETE * FROM ' + name, cb);\n    }, done);\n};\n\n\n"]}