{"version":3,"sources":["index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["var express = require('express');\r\n\r\nvar connection = require('../connection');\r\nvar passport = require('passport');\r\nvar bcrypt = require('bcryptjs');\r\nimport * as utility from \"../utility\";\r\n\r\nvar tokenModel = require('../models/token');\r\n\r\nvar router = express.Router();\r\n\r\n// render the login page when the user goes to index/root\r\nrouter.get('/', (req, res, next) => {\r\n    if(req.user) {\r\n        return res.redirect('/users/');\r\n    }\r\n\r\n    res.render('login', {\r\n        title: 'Login',\r\n        messages: req.flash('error'),\r\n        success_message: req.flash('success')\r\n    });\r\n});\r\n\r\n// authenticate the login, if successful redirect to the users page\r\nrouter.post('/', passport.authenticate('local', {\r\n    successRedirect: '/users/',\r\n    failureRedirect: '/',\r\n    failureFlash: true\r\n}));\r\n\r\n// after the user has clicked the register button, check if the token generated is valid.\r\n// if valid go to the activate page\r\nrouter.get('/activate/:token', (req, res, next) => {\r\n    if(req.params.token.length != 16) {\r\n        return res.redirect('/');\r\n    }\r\n\r\n    tokenModel.getById([req.params.token], (err, rows) => {\r\n        if (err) {\r\n            throw next(err);\r\n        }\r\n        if(rows.length <= 0) {\r\n            res.redirect('/');\r\n        }\r\n        else {\r\n            res.render('activate', {\r\n                title: 'Activate',\r\n                row: rows[0]\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// when the activate form is submitted make sure the new passwords match.\r\n// then insert the password into the users table where the generated token match.\r\n// then delete the token from the tokens table.\r\n// lastly redirect to the login page.\r\nrouter.post('/activate/:token', (req, res, next) => {\r\n    if(!req.body) {\r\n        return res.sendStatus(400);\r\n    }\r\n    if(req.params.token.length != 16) {\r\n        return res.redirect('/');\r\n    }\r\n\r\n    // store form variables\r\n    let password = req.body.password;\r\n    let passwordVerify = req.body.passwordVerify;\r\n\r\n    req.checkBody('password', \"Passwords must match\").equals(passwordVerify);\r\n\r\n    let errors = req.validationErrors();\r\n    if(errors) {\r\n        res.render('activate', {\r\n            title: 'Activate',\r\n            errors: errors,\r\n            row: {\r\n                token: req.params.token\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        bcrypt.hash(password, 8, (err, hash) => {\r\n            if(err) {\r\n                throw next(err);\r\n            }\r\n\r\n            connection.get().query('UPDATE users ' +\r\n                'INNER JOIN tokens ON users.t_number = tokens.t_number' +\r\n                ' SET users.password = ?' +\r\n                ' WHERE tokens.token = ?', [hash, req.params.token], (err, rows) => {\r\n                if (err) {\r\n                    req.flash('Our database servers maybe down, please try again','Our database servers maybe down, please try again');\r\n                    res.render('activate', {\r\n                        title: 'Activate',\r\n                        token: req.params.token,\r\n                        message: req.flash('Our database servers maybe down, please try again')});\r\n                    return;\r\n                }\r\n\r\n                utility.log({ type: 'log', message: 'Updated user password'});\r\n            });\r\n\r\n            tokenModel.deleteById(req.params.token, function (err, rows) {\r\n                if (err) {\r\n                    req.flash('Our database servers maybe down, please try again','Our database servers maybe down, please try again');\r\n                    res.render('activate', {\r\n                        title: 'Activate',\r\n                        token: req.params.token,\r\n                        message: req.flash('Our database servers maybe down, please try again')});\r\n                    return;\r\n                }\r\n                utility.log({ type: 'log', message: 'Token record removed'});\r\n\r\n                if(req.user) {\r\n                    res.redirect('/users/');\r\n                }\r\n                else {\r\n                    res.redirect('/');\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"]}