{"version":3,"sources":["observations.es6"],"names":[],"mappings":"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","file":"observations.js","sourcesContent":["var express = require('express');\nvar connection = require('../../connection');\nvar passport = require('passport');\n\nvar observationModel = require('../../models/observation');\nvar userModel = require('../../models/user');\nvar storeModel = require('../../models/store');\n\nvar router = express.Router();\n// Get for observations when the page is loaded, show the observations for each user\nrouter.get('/', ensureAuthenticated, (req, res, next) => {\n    if (!req.body) { return res.sendStatus(400); }\n\n    let stores = {\n        store_id: undefined,\n        store_name: undefined\n    };\n\n    let returnObj = {\n        title: 'Observations'\n    };\n\n    //Display success message on adding observation\n    if(req.session.success) {\n        req.flash('success_messages', 'Observation successfully added!');\n        res.locals.success_messages = req.flash('success_messages');\n        req.session.success = false;\n    }\n\n    //Check if the current logged in user is a manager\n    connection.get().query('SELECT stores.store_id, store_name, users.t_number FROM stores ' +\n        'INNER JOIN stores_util ON stores.store_id = stores_util.store_id ' +\n        'INNER JOIN users ON stores_util.t_number = users.t_number ' +\n        'WHERE users.t_number = ? AND stores.store_id = ?', [req.user.t_number, req.session.store_id], (err, storesResults) => {\n        if (err) {\n            returnObj['message'] = 'Our database servers maybe down. Please try again.';\n            //Render the page wth error messages\n            return res.render('observations/observations', returnObj);\n        }\n\n        //Connection to get all the employees\n        if(req.user.privileged >= 2) {\n            connection.get().query('SELECT first_name, last_name, users.t_number, store_id FROM users ' +\n                'INNER JOIN stores_util ON users.t_number = stores_util.t_number GROUP BY users.t_number', (err, userResults) => {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/observations', returnObj);\n                }\n\n                //Connection to get all of the observations for each employee ordered by date\n                getAllObservations((err, obsResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page wth error messages\n                        return res.render('observations/observations', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['observations'] = obsResults;\n                    returnObj['stores'] = storesResults;\n\n                    returnObj['obsObj'] = JSON.stringify(returnObj);\n                    //Render the observations page with the list of users and observations\n                    res.render('observations/observations', returnObj);\n                });\n            });\n        }\n        else {\n            connection.get().query('SELECT first_name, last_name, users.t_number, store_id FROM users ' +\n                'INNER JOIN stores_util ON users.t_number = stores_util.t_number' +\n                'WHERE users.t_number = ? GROUP BY users.t_number', req.user.t_number, (err, userResults) => {\n\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/observations', returnObj);\n                }\n\n                //Connection to get all of the observations for each employee ordered by date\n                getAllObservations((err, obsResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page wth error messages\n                        return res.render('observations', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['observations'] = obsResults;\n                    returnObj['stores'] = storesResults;\n\n                    returnObj['obsObj'] = JSON.stringify(returnObj);\n\n                    //Render the observations page with the list of users and observations\n                    res.render('observations/observations', returnObj);\n                });\n            });\n        }\n    });\n});\n\n// When the add-observation page is loaded, render the add observations page\nrouter.get('/add-observation', ensureAuthenticated, (req, res, next) => {\n    if (!req.body) { return res.sendStatus(400); }\n\n    let returnObj = {\n        title: 'Add Observation'\n    };\n\n    if(req.user.privileged >= 2) {\n\n        //Connection to get all of the employees in the users table\n        storeModel.getUsersByStoreId(req.session.store_id, (err, userResults) => {\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills((err, categoryResults) => {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again';\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the  behaviours table\n                getAllBehaviours((err, behaviourResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page with error messages\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] = behaviourResults;\n\n                    //Render the page with the DB results\n                    res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n    else {\n        //Connection to get all of the employees in the users table\n        userModel.getById(req.user.t_number, (err, userResults) => {\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills((err, categoryResults) => {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the  behaviours table\n                getAllBehaviours((err, behaviourResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page with error messages\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] = behaviourResults;\n\n                    //Render the page with the DB results\n                    res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n});\n\n// When the add-observation page is loaded, and there is a t_number is the url. Render the add observations page\nrouter.get('/add-observation/:employee', ensureAuthenticated, (req, res, next) => {\n    if (!req.body) {\n        return res.sendStatus(400);\n    }\n\n    let returnObj = {\n        title: 'Add Observation'\n    };\n\n    if(req.user.privileged >= 2) {\n        //Connection to get all of the employees in the users table\n        storeModel.getUsersByStoreId(req.session.store_id, (err, userResults) => {\n            //If an error is thrown\n            if (err) {\n                //Render the page wth error messages\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills((err, categoryResults) => {\n                //If an error is thrown\n                if (err) {\n                    //Render the page wth error messages\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours((err, behaviourResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        //Render the page wth error messages\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] =  behaviourResults;\n                    returnObj['employee'] = req.params.employee;\n\n                    //Render the page with the query results\n                    return res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n    else {\n        userModel.getById(req.user.t_number, (err, userResults) => {\n            //If an error is thrown\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills((err, categoryResults) => {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours((err, behaviourResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] =  behaviourResults;\n                    returnObj['employee'] = req.params.employee;\n\n                    //Render the page with the query results\n                    return res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n});\n\n/**\n * When the observation is submitted, this router.post gets triggered.\n * It takes the form values from the front-end page and inserts them into the observations table\n */\nrouter.post('/add-observation', ensureAuthenticated, (req, res, next) => {\n    if (!req.body) {\n        return res.sendStatus(400);\n    }\n\n    let returnObj = {\n        title: 'Observations'\n    };\n\n    //Check that the user has selected an employee\n    if (req.body.employeeDropdown != undefined && req.body.goodorbad != undefined) {\n        //Store form variables\n        var behaviour = req.body.goodorbad.replace(\"bad\", \"\").replace(\"good\", \"\");\n        var assignedTo = req.body.employeeDropdown;\n        var assignedBy = req.user.t_number;\n        var observationDate = getCurrentDate();\n        var observationType = req.body.goodorbad;\n\n        //Assign observationType\n        if (observationType.indexOf(\"good\") != -1) {\n            observationType = \"1\";\n        }\n        else {\n            observationType = \"0\";\n        }\n\n        var observationComment = req.body.commentBox;\n\n        //Creating the JSON array to store the observation data\n        var observation = {\n            behaviour_id: behaviour,\n            assigned_to: assignedTo,\n            assigned_by: assignedBy,\n            observation_date: observationDate,\n            observation_type: observationType,\n            observation_comment: observationComment\n        }; //End observation\n\n        //Inserting the data into the observations table using a JSON array\n        observationModel.create(observation, (err, result) => {\n            //If an error is thrown\n            if (err) {\n                //Render the page wth error messages\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                returnObj['behaviour'] = behaviour;\n                returnObj['assignedTo'] = assignedTo;\n                returnObj['assignedBy'] = assignedBy;\n                returnObj['observationDate'] = observationDate;\n                returnObj['observationType'] = observationType;\n                returnObj['observationComment'] = observationComment;\n\n                //Render the page wth error messages\n                return res.render('observations/add-observation', returnObj); //End render\n            } //End if\n            req.flash('success_messages', 'Observation successfully added!');\n            res.locals.success_messages = req.flash('success_messages');\n\n            //Connection to get all of the employees in the users table\n            connection.get().query('SELECT first_name, last_name, t_number FROM users', (err, userResults) => {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/observations',returnObj); //End render\n                } //End if\n\n                //Get all of the observations for each employee\n                connection.get().query('SELECT users.t_number, behaviour_desc, observations.observation_id, skills.skill_title, ' +\n                    'observations.observation_comment , observations.observation_date , observations.assigned_by FROM users ' +\n                    'LEFT JOIN observations on users.t_number = observations.assigned_to ' +\n                    'LEFT JOIN behaviours on observations.behaviour_id = behaviours.behaviour_id ' +\n                    'LEFT JOIN skills on behaviours.skill_id = skills.skill_id', (err, obsResults) => {\n                    //If an error is thrown\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    if(err)\n                    {\n                        //Render the page wth error messages\n                        return res.render('observations/observations',returnObj); //End render\n\n                    } //End if\n                    req.session.success = true;\n                    return res.redirect('/users/observations');\n                }); //End connection for observations for each employee\n            }); //End connection for users\n        });\n    }\n    else {\n        returnObj['title'] = 'Add Observation';\n        //Connection to get all of the employees in the users table\n        userModel.getAll((err, userResults) => {\n            //If an error is thrown\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                //Render the page wth error messages\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills((err, categoryResults) => {\n                //if an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation',returnObj);\n                }\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours((err, behaviourResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation',returnObj);\n                    }\n\n                    //JSON array to hold behaviour info\n                    var behaviour = {\n                        behaviour_desc: undefined,\n                        behaviour_id: undefined,\n                        skill_id: undefined\n                    };\n\n                    //Check if the user has selected an employee\n                    if (req.body.employeeDropdown != undefined) {\n                        returnObj['message'] = 'Please select a behaviour type';\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        returnObj['selectedEmployee'] = req.body.employeeDropdown;\n\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    //Check if the user has selected a behaviour type\n                    else {\n                        returnObj['message'] = 'Please select an employee';\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        return res.render('observations/add-observation', returnObj);\n                    }\n                });\n            });\n        });\n    }\n});\n\n/**\n * When the observation is submitted, this router.post gets triggered. It takes the form values from the front-end page and inserts them into the observations table\n * This method is called when there is an t_number in the url\n */\nrouter.post('/add-observation/:employee', ensureAuthenticated, (req, res, next) => {\n    if (!req.body) {\n        return res.sendStatus(400);\n    }\n\n    let returnObj = {\n        title: 'Observations'\n    };\n\n    //Check that the user has selected an employee\n    if (req.body.employeeDropdown != undefined && req.body.goodorbad != undefined) {\n        //Store form variables\n        let behaviour = req.body.goodorbad.replace(\"bad\", \"\").replace(\"good\", \"\");\n        let assignedTo = req.body.employeeDropdown;\n        let assignedBy = req.user.t_number;\n        let observationDate = getCurrentDate();\n        let observationType = req.body.goodorbad;\n\n        //Assign observationType\n        if (observationType.indexOf(\"good\") != -1) {\n            observationType = \"1\";\n        }\n        else {\n            observationType = \"0\";\n        }\n\n        let observationComment = req.body.commentBox;\n\n        //Creating the JSON array to store the observation data\n        let observation = {\n            behaviour_id: behaviour,\n            assigned_to: assignedTo,\n            assigned_by: assignedBy,\n            observation_date: observationDate,\n            observation_type: observationType,\n            observation_comment: observationComment\n        };\n\n        console.log(observation);\n\n        //Inserting the data into the observations table using a JSON array\n        observationModel.create(observation, (err, result) => {\n            //If an error is thrown\n            if (err) {\n                //Render the page wth error messages\n                returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                returnObj['behaviour'] = behaviour;\n                returnObj['assignedTo'] = assignedTo;\n                returnObj['assignedBy'] = assignedBy;\n                returnObj['observationDate'] = observationDate;\n                returnObj['observationType'] = observationType;\n                returnObj['observationComment'] = observationComment;\n\n                //Render the page wth error messages\n                return res.render('observations/add-observation', returnObj); //End render\n                //Render the page wth error messages\n            }\n\n            req.flash('success_messages', 'The observation was successfully added to the database.');\n            res.locals.success_messages = req.flash('success_messages');\n\n            //Connection to get all of the employees in the users table\n            selectAllUsers((err, userResults) => {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                    //Render the page wth error messages\n                    return res.render('observations/observations',returnObj); //End render\n                }\n\n                //Get all of the observations for each employee\n                connection.get().query('SELECT users.t_number, behaviour_desc, observations.observation_id, skills.skill_title, ' +\n                    'observations.observation_comment , observations.observation_date , observations.assigned_by FROM users ' +\n                    'LEFT JOIN observations on users.t_number = observations.assigned_to ' +\n                    'LEFT JOIN behaviours on observations.behaviour_id = behaviours.behaviour_id ' +\n                    'LEFT JOIN skills on behaviours.skill_id = skills.skill_id', (err, obsResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                        //Render the page wth error messages\n                        return res.render('observations/observations',returnObj); //End render\n                    } //end if\n\n                    req.session.success = true;\n                    return res.redirect('/users/observations');\n                });\n            });\n        });\n\n    }\n\n    //Display error message if a user has not selected an employee for the dropdown\n    else {\n        returnObj['title'] = 'Add Observation';\n        //Connection to get all of the employees in the users table\n        selectAllUsers((err, userResults) => {\n            //If an error is thrown\n            if (err) {\n                returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                //Render the page wth error messages\n                return res.render('observations/add-observation',returnObj);\n            } //End if\n\n            //Get all the skills from the skills table\n            getAllSkills((err, categoryResults) => {\n                //if an error is thrown\n                if (err) {\n                    returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation',returnObj);\n                } //End if\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours((err, behaviourResults) => {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation',returnObj);\n                    } //End if\n\n                    //JSON array to hold behaviour info\n                    let behaviour = {\n                        behaviour_desc: undefined,\n                        behaviour_id: undefined,\n                        skill_id: undefined\n                    }; //End behaviour\n\n                    //Check if the user has selected an employee\n                    if (req.body.employeeDropdown != undefined) {\n                        returnObj['message'] = req.flash('Please select a behaviour type');\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        returnObj['selectedEmployee'] = req.body.employeeDropdown;\n\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation', returnObj);\n                    } //End if\n\n                    //Check if the user has selected a behaviour type\n                    else {\n                        returnObj['message'] = req.flash('Please select an employee');\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        return res.render('observations/add-observation', returnObj);\n                    }\n                });\n            });\n        });\n    }\n});\n\nrouter.post('/remove', ensureAuthenticated, (req, res, next) => {\n    var observationId = req.body.id;\n    observationModel.deleteById(observationId, (err, result) => {\n        if (err) {\n            console.log('Error deleting observation_id ' + observationId);\n            return res.end('Error: ' + err.message);\n        }\n\n        console.log('Removing observation ' + observationId);\n        res.send(observationId);\n    });\n});\n\n// Ensure sure the user is authenticated\nfunction ensureAuthenticated(req, res, next) {\n    if (req.isAuthenticated()) { return next(); }\n    res.redirect('/');\n}\n\n//Select all users in the db\nfunction selectAllUsers(callback) {\n    connection.get().query('SELECT * FROM users WHERE privileged != 4', (err, rows) => {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n\n//Select all observations and order them in a descending order\nfunction getAllObservations(callback) {\n    connection.get().query('SELECT users.t_number, behaviour_desc, observations.observation_id, skills.skill_title, observations.observation_comment, observations.observation_date , ' +\n        'observations.assigned_by, ASSIGNED_BY_STATEMENT.full_name AS assigned_by_name, observations.observation_type FROM users ' +\n        'INNER JOIN observations on users.t_number = observations.assigned_to ' +\n        'INNER JOIN behaviours on observations.behaviour_id = behaviours.behaviour_id ' +\n        'INNER JOIN skills on behaviours.skill_id = skills.skill_id ' +\n        'INNER JOIN (SELECT users.t_number AS assigned_by, observations.assigned_to AS assigned_to, CONCAT(users.first_name, \" \", users.last_name) AS full_name FROM users ' +\n        'INNER JOIN observations on users.t_number = observations.assigned_by) as ASSIGNED_BY_STATEMENT on observations.assigned_by = ASSIGNED_BY_STATEMENT.assigned_by ' +\n        'GROUP BY observations.observation_id ORDER BY observations.observation_date DESC ', (err, rows) => {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n//Select all skills in the db\nfunction getAllSkills(callback) {\n    connection.get().query('SELECT skills.skill_title, skills.skill_id FROM skills', (err, rows) => {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n//Select all behaviours in the db\nfunction getAllBehaviours(callback) {\n    connection.get().query('SELECT behaviours.behaviour_desc, behaviour_id, skills.skill_id FROM behaviours ' +\n        'JOIN skills ON behaviours.skill_id = skills.skill_id', (err, rows) => {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n/**\n * Custom function that return the current date and time\n * @returns {string} in yyyy:mm:dd hh:mm:ss format\n */\nfunction getCurrentDate() {\n    let date = new Date();\n\n    let hour = date.getHours();\n    hour = (hour < 10 ? \"0\" : \"\") + hour;\n\n    let min = date.getMinutes();\n    min = (min < 10 ? \"0\" : \"\") + min;\n\n    let sec = date.getSeconds();\n    sec = (sec < 10 ? \"0\" : \"\") + sec;\n\n    let year = date.getFullYear();\n\n    let month = date.getMonth() + 1;\n    month = (month < 10 ? \"0\" : \"\") + month;\n\n    let day = date.getDate();\n    day = (day < 10 ? \"0\" : \"\") + day;\n\n    return year + \":\" + month + \":\" + day + \" \" + hour + \":\" + min + \":\" + sec;\n}\n\nmodule.exports = router;"]}