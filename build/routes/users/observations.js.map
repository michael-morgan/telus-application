{"version":3,"sources":["observations.es6"],"names":[],"mappings":"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","file":"observations.js","sourcesContent":["var express = require('express');\nvar connection = require('../../connection');\nvar passport = require('passport');\n\nvar observationModel = require('../../models/observation');\n\nvar router = express.Router();\n// Get for observations when the page is loaded, show the observations for each user\nrouter.get('/', ensureAuthenticated, function (req, res, next) {\n    if (!req.body) { return res.sendStatus(400); }\n\n    var stores = {\n        store_id:undefined,\n        store_name:undefined\n    };\n\n    var returnObj = {\n        title: 'Observations'\n    };\n\n    //Display success message on adding observation\n    if(req.session.success) {\n        req.flash('success_messages', 'Observation successfully added!');\n        res.locals.success_messages = req.flash('success_messages');\n        req.session.success = false;\n    }\n\n    //Check if the current logged in user is a manager\n    connection.get().query('SELECT stores.store_id, store_name,t_number FROM  stores ' +\n        'INNER JOIN users ON stores.store_id = users.store_id ' +\n        'WHERE t_number = ?', req.user.t_number, function (err, storesResults) {\n        if (err) {\n            returnObj['message'] = 'Our database servers maybe down. Please try again.';\n            //Render the page wth error messages\n            return res.render('observations/observations', returnObj);\n        }\n\n        //Connection to get all the employees\n        if(req.user.privileged >= 2) {\n            connection.get().query('SELECT first_name, last_name,t_number,store_id FROM users ', function (err, userResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/observations', returnObj);\n                }\n\n                //Connection to get all of the observations for each employee ordered by date\n                getAllObservations(function (err, obsResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page wth error messages\n                        return res.render('observations/observations', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['observations'] = obsResults;\n                    returnObj['stores'] = storesResults;\n\n                    returnObj['obsObj'] = JSON.stringify(returnObj);\n                    //Render the observations page with the list of users and observations\n                    res.render('observations/observations', returnObj);\n                });\n            });\n        }\n        else {\n            connection.get().query('SELECT first_name, last_name, t_number, store_id FROM users WHERE t_number = ? ', req.user.t_number, function (err, userResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/observations', returnObj);\n                }\n\n                //Connection to get all of the observations for each employee ordered by date\n                getAllObservations(function (err, obsResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page wth error messages\n                        return res.render('observations', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['observations'] = obsResults;\n                    returnObj['stores'] = storesResults;\n\n                    returnObj['obsObj'] = JSON.stringify(returnObj);\n\n                    //Render the observations page with the list of users and observations\n                    res.render('observations/observations', returnObj);\n                });\n            });\n        }\n    });\n});\n\n// When the add-observation page is loaded, render the add observations page\nrouter.get('/add-observation', ensureAuthenticated, function (req, res, next) {\n    if (!req.body) { return res.sendStatus(400); }\n\n    var returnObj = {\n        title: 'Add Observation'\n    };\n\n    if(req.user.privileged >= 2) {\n        //Connection to get all of the employees in the users table\n        connection.get().query('SELECT first_name, last_name, t_number FROM users WHERE store_id = ? ', req.user.store_id, function (err, userResults) {\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills(function (err, categoryResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again';\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the  behaviours table\n                getAllBehaviours(function (err, behaviourResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page with error messages\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] = behaviourResults;\n\n                    //Render the page with the DB results\n                    res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n    else {\n        //Connection to get all of the employees in the users table\n        connection.get().query('SELECT first_name, last_name, t_number FROM users WHERE t_number = ? ', req.user.t_number, function (err, userResults) {\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills(function (err, categoryResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the  behaviours table\n                getAllBehaviours(function (err, behaviourResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page with error messages\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] = behaviourResults;\n\n                    //Render the page with the DB results\n                    res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n});\n\n// When the add-observation page is loaded, and there is a t_number is the url. Render the add observations page\nrouter.get('/add-observation/:employee', ensureAuthenticated, function (req, res, next) {\n    if (!req.body) {\n        return res.sendStatus(400);\n    }\n    var returnObj = {\n        title: 'Add Observation'\n    };\n    if(req.user.privileged >= 2) {\n        //Connection to get all of the employees in the users table\n        connection.get().query('SELECT first_name, last_name, t_number FROM users WHERE store_id = ? ', req.user.store_id, function (err, userResults) {\n            //If an error is thrown\n            if (err) {\n                //Render the page wth error messages\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills(function (err, categoryResults) {\n                //If an error is thrown\n                if (err) {\n                    //Render the page wth error messages\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours(function (err, behaviourResults) {\n                    //If an error is thrown\n                    if (err) {\n                        //Render the page wth error messages\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] =  behaviourResults;\n                    returnObj['employee'] = req.params.employee;\n\n                    //Render the page with the query results\n                    return res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n    else {\n        connection.get().query('SELECT first_name, last_name, t_number FROM users WHERE t_number = ?', req.user.t_number, function (err, userResults) {\n            //If an error is thrown\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                return res.render('observations/add-observation', returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills(function (err, categoryResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    return res.render('observations/add-observation', returnObj);\n                }\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours(function (err, behaviourResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n\n                    returnObj['users'] = userResults;\n                    returnObj['skills'] = categoryResults;\n                    returnObj['behaviours'] =  behaviourResults;\n                    returnObj['employee'] = req.params.employee;\n\n                    //Render the page with the query results\n                    return res.render('observations/add-observation', returnObj);\n                });\n            });\n        });\n    }\n});\n\n/**\n * When the observation is submitted, this router.post gets triggered.\n * It takes the form values from the front-end page and inserts them into the observations table\n */\nrouter.post('/add-observation', ensureAuthenticated, function (req, res, next) {\n    if (!req.body) {\n        return res.sendStatus(400);\n    }\n\n    var returnObj = {\n        title: 'Observations'\n    };\n\n    //Check that the user has selected an employee\n    if (req.body.employeeDropdown != undefined && req.body.goodorbad != undefined) {\n        //Store form variables\n        var behaviour = req.body.goodorbad.replace(\"bad\", \"\").replace(\"good\", \"\");\n        var assignedTo = req.body.employeeDropdown;\n        var assignedBy = req.user.t_number;\n        var observationDate = getCurrentDate();\n        var observationType = req.body.goodorbad;\n\n        //Assign observationType\n        if (observationType.indexOf(\"good\") != -1) {\n            observationType = \"1\";\n        }\n        else {\n            observationType = \"0\";\n        }\n\n        var observationComment = req.body.commentBox;\n\n        //Creating the JSON array to store the observation data\n        var observation = {\n            behaviour_id: behaviour,\n            assigned_to: assignedTo,\n            assigned_by: assignedBy,\n            observation_date: observationDate,\n            observation_type: observationType,\n            observation_comment: observationComment\n        }; //End observation\n\n        //Inserting the data into the observations table using a JSON array\n        observationModel.create(observation, function(err, result) {\n            //If an error is thrown\n            if (err) {\n                //Render the page wth error messages\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                returnObj['behaviour'] = behaviour;\n                returnObj['assignedTo'] = assignedTo;\n                returnObj['assignedBy'] = assignedBy;\n                returnObj['observationDate'] = observationDate;\n                returnObj['observationType'] = observationType;\n                returnObj['observationComment'] = observationComment;\n\n                //Render the page wth error messages\n                return res.render('observations/add-observation', returnObj); //End render\n            } //End if\n            req.flash('success_messages', 'Observation successfully added!');\n            res.locals.success_messages = req.flash('success_messages');\n\n            //Connection to get all of the employees in the users table\n            connection.get().query('SELECT first_name, last_name, t_number FROM users', function(err, userResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/observations',returnObj); //End render\n                } //End if\n\n                //Get all of the observations for each employee\n                connection.get().query('SELECT users.t_number, behaviour_desc, observations.observation_id, skills.skill_title, ' +\n                    'observations.observation_comment , observations.observation_date , observations.assigned_by FROM users ' +\n                    'LEFT JOIN observations on users.t_number = observations.assigned_to ' +\n                    'LEFT JOIN behaviours on observations.behaviour_id = behaviours.behaviour_id ' +\n                    'LEFT JOIN skills on behaviours.skill_id = skills.skill_id', function (err, obsResults) {\n                    //If an error is thrown\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    if(err)\n                    {\n                        //Render the page wth error messages\n                        return res.render('observations/observations',returnObj); //End render\n\n                    } //End if\n                    req.session.success = true;\n                    return res.redirect('/users/observations');\n                }); //End connection for observations for each employee\n            }); //End connection for users\n        });\n    }\n    else {\n        returnObj['title'] = 'Add Observation';\n        //Connection to get all of the employees in the users table\n        connection.get().query('SELECT first_name, last_name,t_number FROM users', function (err, userResults) {\n            //If an error is thrown\n            if (err) {\n                returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                //Render the page wth error messages\n                return res.render('observations/add-observation',returnObj);\n            }\n\n            //Get all the skills from the skills table\n            getAllSkills(function (err, categoryResults) {\n                //if an error is thrown\n                if (err) {\n                    returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation',returnObj);\n                }\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours(function (err, behaviourResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = 'Our database servers maybe down. Please try again.';\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation',returnObj);\n                    }\n\n                    //JSON array to hold behaviour info\n                    var behaviour = {\n                        behaviour_desc: undefined,\n                        behaviour_id: undefined,\n                        skill_id: undefined\n                    };\n\n                    //Check if the user has selected an employee\n                    if (req.body.employeeDropdown != undefined) {\n                        returnObj['message'] = 'Please select a behaviour type';\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        returnObj['selectedEmployee'] = req.body.employeeDropdown;\n\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation', returnObj);\n                    }\n\n                    //Check if the user has selected a behaviour type\n                    else {\n                        returnObj['message'] = 'Please select an employee';\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        return res.render('observations/add-observation', returnObj);\n                    }\n                });\n            });\n        });\n    }\n});\n\n/**\n * When the observation is submitted, this router.post gets triggered. It takes the form values from the front-end page and inserts them into the observations table\n * This method is called when there is an t_number in the url\n */\nrouter.post('/add-observation/:employee', ensureAuthenticated, function (req, res, next) {\n    if (!req.body) {\n        return res.sendStatus(400);\n    }\n\n    var returnObj = {\n        title: 'Observations'\n    };\n\n    //Check that the user has selected an employee\n    if (req.body.employeeDropdown != undefined && req.body.goodorbad != undefined) {\n        //Store form variables\n        var behaviour = req.body.goodorbad.replace(\"bad\", \"\").replace(\"good\", \"\");\n        var assignedTo = req.body.employeeDropdown;\n        var assignedBy = req.user.t_number;\n        var observationDate = getCurrentDate();\n        var observationType = req.body.goodorbad;\n\n        //Assign observationType\n        if (observationType.indexOf(\"good\") != -1) { observationType = \"1\"; }\n        else { observationType = \"0\"; }\n\n        var observationComment = req.body.commentBox;\n\n        //Creating the JSON array to store the observation data\n        var observation = {\n            behaviour_id: behaviour,\n            assigned_to: assignedTo,\n            assigned_by: assignedBy,\n            observation_date: observationDate,\n            observation_type: observationType,\n            observation_comment: observationComment\n        };\n\n        console.log(observation);\n\n        //Inserting the data into the observations table using a JSON array\n        observationModel.create(observation, function(err, result) {\n            //If an error is thrown\n            if (err) {\n                //Render the page wth error messages\n                returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                returnObj['behaviour'] = behaviour;\n                returnObj['assignedTo'] = assignedTo;\n                returnObj['assignedBy'] = assignedBy;\n                returnObj['observationDate'] = observationDate;\n                returnObj['observationType'] = observationType;\n                returnObj['observationComment'] = observationComment;\n\n                //Render the page wth error messages\n                return res.render('observations/add-observation', returnObj); //End render\n                //Render the page wth error messages\n\n            }\n\n            req.flash('success_messages', 'The observation was successfully added to the database.');\n            res.locals.success_messages = req.flash('success_messages');\n\n            //Connection to get all of the employees in the users table\n            selectAllUsers(function (err, userResults) {\n                //If an error is thrown\n                if (err) {\n                    returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                    //Render the page wth error messages\n                    return res.render('observations/observations',returnObj); //End render\n                }\n\n                //Get all of the observations for each employee\n                connection.get().query('SELECT users.t_number, behaviour_desc, observations.observation_id, skills.skill_title, ' +\n                    'observations.observation_comment , observations.observation_date , observations.assigned_by FROM users ' +\n                    'LEFT JOIN observations on users.t_number = observations.assigned_to ' +\n                    'LEFT JOIN behaviours on observations.behaviour_id = behaviours.behaviour_id ' +\n                    'LEFT JOIN skills on behaviours.skill_id = skills.skill_id', function (err, obsResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                        //Render the page wth error messages\n                        return res.render('observations/observations',returnObj); //End render\n                    } //End if\n                    req.session.success = true;\n                    return res.redirect('/users/observations');\n                });\n            });\n        });\n\n    }\n\n    //Display error message if a user has not selected an employee for the dropdown\n    else {\n        returnObj['title'] = 'Add Observation';\n        //Connection to get all of the employees in the users table\n        selectAllUsers(function (err, userResults) {\n            //If an error is thrown\n            if (err) {\n                returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                //Render the page wth error messages\n                return res.render('observations/add-observation',returnObj);\n            } //End if\n\n            //Get all the skills from the skills table\n            getAllSkills(function (err, categoryResults) {\n                //if an error is thrown\n                if (err) {\n                    returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                    //Render the page wth error messages\n                    return res.render('observations/add-observation',returnObj);\n                } //End if\n\n                //Connection to get the behaviours from the behaviours table\n                getAllBehaviours(function (err, behaviourResults) {\n                    //If an error is thrown\n                    if (err) {\n                        returnObj['message'] = req.flash('Our database servers maybe down. Please try again.');\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation',returnObj);\n                    } //End if\n\n\n\n                    //JSON array to hold behaviour info\n                    var behaviour = {\n                        behaviour_desc: undefined,\n                        behaviour_id: undefined,\n                        skill_id: undefined\n                    }; //End behaviour\n\n                    //Check if the user has selected an employee\n                    if (req.body.employeeDropdown != undefined) {\n                        returnObj['message'] = req.flash('Please select a behaviour type');\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        returnObj['selectedEmployee'] = req.body.employeeDropdown;\n\n                        //Render the page wth error messages\n                        return res.render('observations/add-observation', returnObj);\n                    } //End if\n\n                    //Check if the user has selected a behaviour type\n                    else {\n                        returnObj['message'] = req.flash('Please select an employee');\n                        returnObj['users'] = userResults;\n                        returnObj['skills'] = categoryResults;\n                        returnObj['behaviours'] = behaviourResults;\n                        return res.render('observations/add-observation', returnObj);\n                    }\n                });\n            });\n        });\n    }\n});\n\nrouter.post('/remove', ensureAuthenticated, function (req, res, next) {\n    var observationId = req.body.id;\n    observationModel.deleteById(observationId, function(err, result) {\n        if (err) {\n            console.log('Error deleting observation_id ' + observationId);\n            return res.end('Error: ' + err.message);\n        }\n\n        console.log('Removing observation ' + observationId);\n        res.send(observationId);\n    });\n});\n\n// Ensure sure the user is authenticated\nfunction ensureAuthenticated(req, res, next) {\n    if (req.isAuthenticated()) { return next(); }\n    res.redirect('/');\n}\n\n//Select all users in the db\nfunction selectAllUsers(callback) {\n    connection.get().query('SELECT * FROM users WHERE privileged != 4', function(err, rows) {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n\n//Select all observations and order them in a descending order\nfunction getAllObservations(callback) {\n    connection.get().query('SELECT users.t_number, behaviour_desc, observations.observation_id, skills.skill_title, observations.observation_comment, observations.observation_date , ' +\n        'observations.assigned_by, ASSIGNED_BY_STATEMENT.full_name AS assigned_by_name, observations.observation_type FROM users ' +\n        'INNER JOIN observations on users.t_number = observations.assigned_to ' +\n        'INNER JOIN behaviours on observations.behaviour_id = behaviours.behaviour_id ' +\n        'INNER JOIN skills on behaviours.skill_id = skills.skill_id ' +\n        'INNER JOIN (SELECT users.t_number AS assigned_by, observations.assigned_to AS assigned_to, CONCAT(users.first_name, \" \", users.last_name) AS full_name FROM users ' +\n        'INNER JOIN observations on users.t_number = observations.assigned_by) as ASSIGNED_BY_STATEMENT on observations.assigned_by = ASSIGNED_BY_STATEMENT.assigned_by ' +\n        'GROUP BY observations.observation_id ORDER BY observations.observation_date DESC ', function(err, rows) {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n//Select all skills in the db\nfunction getAllSkills(callback) {\n    connection.get().query('SELECT skills.skill_title, skills.skill_id FROM skills', function(err, rows) {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n//Select all behaviours in the db\nfunction getAllBehaviours(callback) {\n    connection.get().query('SELECT behaviours.behaviour_desc, behaviour_id, skills.skill_id FROM behaviours ' +\n        'JOIN skills ON behaviours.skill_id = skills.skill_id', function(err, rows) {\n        if (err) {\n            callback(err, null);\n        } else\n            callback(null, rows);\n    });\n}\n\n/**\n * Custom function that return the current date and time\n * @returns {string} in yyyy:mm:dd hh:mm:ss format\n */\nfunction getCurrentDate() {\n    var date = new Date();\n\n    var hour = date.getHours();\n    hour = (hour < 10 ? \"0\" : \"\") + hour;\n\n    var min = date.getMinutes();\n    min = (min < 10 ? \"0\" : \"\") + min;\n\n    var sec = date.getSeconds();\n    sec = (sec < 10 ? \"0\" : \"\") + sec;\n\n    var year = date.getFullYear();\n\n    var month = date.getMonth() + 1;\n    month = (month < 10 ? \"0\" : \"\") + month;\n\n    var day = date.getDate();\n    day = (day < 10 ? \"0\" : \"\") + day;\n\n    var today = year + \":\" + month + \":\" + day + \" \" + hour + \":\" + min + \":\" + sec;\n\n    return today;\n}\n\nmodule.exports = router;"]}