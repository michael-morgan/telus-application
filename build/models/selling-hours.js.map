{"version":3,"sources":["selling-hours.es6"],"names":[],"mappings":";;AAAA;;;AAGA,IAAI,aAAa,QAAQ,eAAR,CAAjB;;AAEA,QAAQ,MAAR,GAAiB,UAAC,KAAD,EAAQ,IAAR,EAAiB;AAC9B,eAAW,GAAX,GAAiB,KAAjB,CAAuB,4CAAvB,EAAqE,CAAC,KAAD,CAArE,EAA8E,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC7F,YAAG,KAAH,EAAU;AACN,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,OAAO,QAAlB;AACH,KAND;AAOH,CARD;;AAUA,QAAQ,+BAAR,GAA0C,UAAC,EAAD,EAAI,IAAJ,EAAa;AACnD,eAAW,GAAX,GAAiB,KAAjB,CAAuB,8HACvB,uGADuB,GAEnB,uEAFJ,EAE4E,EAF5E,EAEgF,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC/F,YAAG,KAAH,EAAU;AACN,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,MAAX;AACH,KARD;AASH,CAVD;;AAYA,QAAQ,eAAR,GAA0B,UAAC,MAAD,EAAS,IAAT,EAAkB;AACxC,eAAW,GAAX,GAAiB,KAAjB,CAAuB,yGAAvB,EAAkI,MAAlI,EAA0I,UAAC,KAAD,EAAQ,MAAR,EAAmB;AACzJ,YAAG,KAAH,EAAU;AACN,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,OAAO,WAAlB;AACH,KAND;AAOH,CARD;;AAUA,QAAQ,UAAR,GAAqB,UAAC,MAAD,EAAS,IAAT,EAAkB;AACnC,eAAW,GAAX,GAAiB,KAAjB,CAAuB,uDAAvB,EAAgF,MAAhF,EAAwF,UAAC,KAAD,EAAQ,MAAR,EAAmB;AACvG,YAAG,KAAH,EAAU;AACN,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,MAAX;AACH,KAND;AAOH,CARD;;AAUA,QAAQ,aAAR,GAAwB,UAAC,MAAD,EAAS,IAAT,EAAkB;AACtC,eAAW,GAAX,GAAiB,KAAjB,CAAuB,6BAAvB,EAAsD,CAAC,MAAD,CAAtD,EAAgE,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC/E,YAAG,KAAH,EAAU;AACN,oBAAQ,GAAR,CAAY,KAAZ;AACA,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,OAAO,QAAlB;AACH,KAPD;AAQH,CATD;;AAWA,QAAQ,aAAR,GAAwB,UAAC,MAAD,EAAS,IAAT,EAAkB;AACtC,eAAW,GAAX,GAAiB,KAAjB,CAAuB,6FAAvB,EAAsH,MAAtH,EAA8H,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC7I,YAAG,KAAH,EAAU;AACN,oBAAQ,GAAR,CAAY,KAAZ;AACA,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,OAAO,WAAlB;AACH,KAPD;AAQH,CATD;;AAWA,QAAQ,UAAR,GAAqB,UAAC,MAAD,EAAS,IAAT,EAAkB;AACnC,eAAW,GAAX,GAAiB,KAAjB,CAAuB,4EAAvB,EAAqG,MAArG,EAA6G,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC5H,YAAG,KAAH,EAAU;AACN,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED,aAAK,IAAL,EAAW,MAAX;AACH,KAND;AAOH,CARD","file":"selling-hours.js","sourcesContent":["/**\r\n * Created by jacob on 08/06/16.\r\n */\r\nvar connection = require('../connection');\r\n\r\nexports.create = (hours, done) => {\r\n    connection.get().query('INSERT INTO `selling_hours_schedule` SET ?', [hours], (error, result) => {\r\n        if(error) {\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result.insertId);\r\n    });\r\n};\r\n\r\nexports.getHoursByStoreIDForCurrentWeek = (id,done) => {\r\n    connection.get().query('SELECT * FROM selling_hours_schedule INNER JOIN stores_util ON selling_hours_schedule.team_member = stores_util.t_number '+\r\n    'WHERE selling_hours_schedule.store_id = stores_util.store_id AND selling_hours_schedule.store_id = ? '+\r\n        'AND YEARWEEK(selling_hours_schedule.date, 0) = YEARWEEK(CURDATE(), 0)',id, (error, result) => {\r\n        if(error) {\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result);\r\n    });\r\n};\r\n\r\nexports.updateHoursByID = (values, done) => {\r\n    connection.get().query('UPDATE selling_hours_schedule SET selling_hours = ? WHERE team_member = ? AND store_id = ? and date = ?', values, (error, result) => {\r\n        if(error) {\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result.changedRows);\r\n    });\r\n};\r\n\r\nexports.getBudgets = (values, done) => {\r\n    connection.get().query('SELECT * FROM budgets WHERE date = ? AND store_id = ?', values, (error, result) => {\r\n        if(error) {\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result);\r\n    });\r\n};\r\n\r\nexports.createBudgets = (budget, done) => {\r\n    connection.get().query('INSERT INTO `budgets` SET ?', [budget], (error, result) => {\r\n        if(error) {\r\n            console.log(error)\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result.insertId);\r\n    });\r\n};\r\n\r\nexports.updateBudgets = (values, done) => {\r\n    connection.get().query('UPDATE `budgets` SET CTs = ?, revenue = ?, aotm = ?, ls = ? WHERE date = ? AND store_id = ?', values, (error, result) => {\r\n        if(error) {\r\n            console.log(error);\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result.changedRows);\r\n    });\r\n};\r\n\r\nexports.getBudgets = (values, done) => {\r\n    connection.get().query('SELECT CTs, revenue, aotm, ls FROM budgets WHERE date = ? AND store_id = ?', values, (error, result) => {\r\n        if(error) {\r\n            return done(error);\r\n        }\r\n\r\n        done(null, result);\r\n    });\r\n};\r\n\r\n"]}